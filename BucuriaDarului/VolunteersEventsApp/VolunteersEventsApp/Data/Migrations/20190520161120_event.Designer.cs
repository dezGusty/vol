// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VolunteersEventsApp.Data;

namespace VolunteersEventsApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190520161120_event")]
    partial class @event
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Number");

                    b.Property<string>("Street");

                    b.Property<int?>("VolunteerID");

                    b.HasKey("AddressID");

                    b.HasIndex("VolunteerID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Aditionalinfo", b =>
                {
                    b.Property<int>("AditionalinfoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasCar");

                    b.Property<bool>("HasDrivingLicence");

                    b.Property<int?>("VolunteerID");

                    b.HasKey("AditionalinfoID");

                    b.HasIndex("VolunteerID");

                    b.ToTable("Aditionalinfo");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Comments", b =>
                {
                    b.Property<int>("CommentsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Days");

                    b.Property<int>("TimeAvailability");

                    b.Property<int?>("WorkscheduleID");

                    b.HasKey("CommentsID");

                    b.HasIndex("WorkscheduleID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.ContactInformation", b =>
                {
                    b.Property<int>("ContactInformationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MailAdress");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("VolunteerID");

                    b.HasKey("ContactInformationID");

                    b.HasIndex("VolunteerID");

                    b.ToTable("ContactInformation");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Contract", b =>
                {
                    b.Property<int>("ContractID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractPeriod");

                    b.Property<bool>("HasContract");

                    b.Property<int>("NumberOfRegistration");

                    b.Property<int?>("VolunteerID");

                    b.HasKey("ContractID");

                    b.HasIndex("VolunteerID");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfEvents");

                    b.Property<int>("Lasting");

                    b.Property<string>("NameOfEvent");

                    b.Property<int>("NumberOfVolunteersNeeded");

                    b.Property<string>("PlaceOfEvent");

                    b.Property<string>("TypeOfActivities");

                    b.Property<string>("TypeOfEvent");

                    b.HasKey("ID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.RegistrationDay", b =>
                {
                    b.Property<int>("RegistrationDayID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day");

                    b.Property<int>("Month");

                    b.Property<int?>("VolunteerID");

                    b.Property<int>("Year");

                    b.HasKey("RegistrationDayID");

                    b.HasIndex("VolunteerID");

                    b.ToTable("RegistrationDay");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Volunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<DateTime>("Birthdate");

                    b.Property<int?>("Desired_workplace");

                    b.Property<string>("Field_of_activity");

                    b.Property<string>("Firstname");

                    b.Property<int?>("Gender");

                    b.Property<int>("HourCount");

                    b.Property<bool>("InActivity");

                    b.Property<string>("Lastname");

                    b.Property<string>("Occupation");

                    b.Property<string>("Occupation_description");

                    b.HasKey("VolunteerID");

                    b.ToTable("Volunteer");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Workschedule", b =>
                {
                    b.Property<int>("WorkscheduleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HoursWeek");

                    b.Property<int?>("VolunteerID");

                    b.HasKey("WorkscheduleID");

                    b.HasIndex("VolunteerID");

                    b.ToTable("Workschedule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Address", b =>
                {
                    b.HasOne("VolunteersEventsApp.Models.Volunteer", "Volunteer")
                        .WithMany("Address")
                        .HasForeignKey("VolunteerID");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Aditionalinfo", b =>
                {
                    b.HasOne("VolunteersEventsApp.Models.Volunteer", "Volunteer")
                        .WithMany("AditionalInfo")
                        .HasForeignKey("VolunteerID");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Comments", b =>
                {
                    b.HasOne("VolunteersEventsApp.Models.Workschedule", "Workschedule")
                        .WithMany()
                        .HasForeignKey("WorkscheduleID");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.ContactInformation", b =>
                {
                    b.HasOne("VolunteersEventsApp.Models.Volunteer", "Volunteer")
                        .WithMany("ContactInformation")
                        .HasForeignKey("VolunteerID");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Contract", b =>
                {
                    b.HasOne("VolunteersEventsApp.Models.Volunteer", "Volunteer")
                        .WithMany("Contract")
                        .HasForeignKey("VolunteerID");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.RegistrationDay", b =>
                {
                    b.HasOne("VolunteersEventsApp.Models.Volunteer", "Volunteer")
                        .WithMany("RegistrationDay")
                        .HasForeignKey("VolunteerID");
                });

            modelBuilder.Entity("VolunteersEventsApp.Models.Workschedule", b =>
                {
                    b.HasOne("VolunteersEventsApp.Models.Volunteer")
                        .WithMany("Workschedule")
                        .HasForeignKey("VolunteerID");
                });
#pragma warning restore 612, 618
        }
    }
}
